#!/bin/sh -f
# Configure wmii
wmiiscript=wmiirc # For wmii.sh
. wmii.sh

# Configuration Variables
MODKEY=Mod1
UP=k
DOWN=j
LEFT=h
RIGHT=l

# Bars
noticetimeout=5
noticebar=/rbar/!notice
# List of bars <PREFIX>:<NAME> separated with whitespaces.
# Prefix used for ordering the bars.
BARS=

# Colors tuples: "<text> <background> <border>"
WMII_NORMCOLORS='#000000 #c1c48b #81654f'
# WMII_FOCUSCOLORS='#000000 #81654f #000000'
WMII_BACKGROUND='#333333'

WMII_FOCUSCOLORS='#eeeee0 #506080 #708090'
# WMII_BACKGROUND='#333333'
# WMII_NORMCOLORS='#e0e0e0 #444444 #666666'
# WMII_NORMCOLORS='#cccccc #004050 #002030'

# WMII_FONT='DejaVu\ Sans\ Mono\ 11'
WMII_FONT='-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
# WMII_FONT='-dejavu-dejavu sans-bold-r-*-*-12-*-*-*-*-*-iso10646-*'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)
WMII_TERM="urxvtcd"

# Menu history
hist="$(wmiir namespace)/history"
histnum=5000

# Column Rules
wmiir write /colrules <<!
/gimp/ -> 17+83+41
/.*/ -> 62+38 # Golden Ratio
!

# Tagging Rules
wmiir write /tagrules <<!
/Tabhunter.*/ -> ~+!
/Iceweasel.*/ -> web
/Skype.*/ -> skype
/urxvt.*/ -> !
/XMMS.*/ -> ~+!
/MPlayer.*/ -> ~
/OpenOffice.*/ -> ~
/rsibreak.*/ -> ~
/.*/ -> !
!

WMII_HOME="$HOME/.wmii-hg"

# Including bars
. "$WMII_HOME/volume.sh"
. "$WMII_HOME/battery.sh"
. "$WMII_HOME/mpd.sh"

# Prefixes are added because the bars are ordered by lexical order of their
# names.
XLAYOUT_BAR="z7_layout"
STATUS_BAR="z9_status"

# Status Bar Info
status() {
	echo -n $(uptime | sed 's/.*://; s/,//g') '|' $(date +%H:%M\ %d.%m.%y)
}

call_if_exists()
{
    type "$1" >/dev/null 2>&1 && eval "$@"
}

local_events() { true;}
wi_runconf -s wmiirc_local

echo $WMII_NORMCOLORS | wmiir create $noticebar

# Event processing
events()
{
	cat <<'!'
	# Events
	Event CreateTag
		echo "$WMII_NORMCOLORS" "$@" | wmiir create "/lbar/$@"
	Event DestroyTag
		wmiir remove "/lbar/$@"
	Event FocusTag
		wmiir xwrite "/lbar/$@" "$WMII_FOCUSCOLORS" "$@"
	Event UnfocusTag
		wmiir xwrite "/lbar/$@" "$WMII_NORMCOLORS" "$@"
	Event UrgentTag
		shift
		wmiir xwrite "/lbar/$@" "*$@"
	Event NotUrgentTag
		shift
		wmiir xwrite "/lbar/$@" "$@"
	Event LeftBarClick LeftBarDND
		shift
		wmiir xwrite /ctl view "$@"
	Event RightBarClick LeftBarDND
		case "$2" in
!

    # Registering mouse click handlers for bars.
    for i in $BARS; do
	full_barname=${i/:/_}
	bar=${i#*:}

	cat <<!
		$full_barname)
			call_if_exists ${bar}_on_click \$1
			;;
!
    done
    unset full_barname bar

    cat <<'!'
		esac
	Event Unresponsive
		{
			client=$1; shift
			msg="The following client is not responding. What would you like to do?$wi_nl"
			resp=$(wihack -transient $client \
				      xmessage -nearmouse -buttons Kill,Wait -print \
				               "$msg $(wmiir read /client/sel/label)")
			if [ "$resp" = Kill ]; then
				wmiir xwrite /client/$client/ctl slay &
			fi
		}&
	Event Notice
		wmiir xwrite $noticebar $wi_arg

		kill $xpid 2>/dev/null # Let's hope this isn't reused...
		{ sleep $noticetimeout; wmiir xwrite $noticebar ' '; }&
		xpid = $!
	Menu Client-3-Nop
		true
	Menu Client-3-Delete
		wmiir xwrite /client/$1/ctl kill
	Menu Client-3-Kill
		wmiir xwrite /client/$1/ctl slay
	Menu Client-3-Fullscreen
		wmiir xwrite /client/$1/ctl Fullscreen on
	Event ClientMouseDown
		wi_fnmenu Client $2 $1 &
	Menu LBar-3-Delete
		tag=$1; clients=$(wmiir read "/tag/$tag/index" | awk '/[^#]/{print $2}')
		for c in $clients; do
			if [ "$tag" = "$(wmiir read /client/$c/tags)" ]; then
				wmiir xwrite /client/$c/ctl kill
			else
				wmiir xwrite /client/$c/tags -$tag
			fi
			if [ "$tag" = "$(wi_seltag)" ]; then
				newtag=$(wi_tags | awk -v't='$tag '
					$1 == t { if(!l) getline l
						  print l
						  exit }
					{ l = $0 }')
				wmiir xwrite /ctl view $newtag
			fi
		done
	Event LeftBarMouseDown
		wi_fnmenu LBar "$@" &
	# Actions
	Action quit
		wmiir xwrite /ctl quit
	Action exec
		wmiir xwrite /ctl exec "$@"
	Action rehash
		proglist $PATH >$progsfile
	Action status
		set +xv
		if wmiir remove /rbar/$STATUS_BAR 2>/dev/null; then
			sleep 2
		fi
		echo "$WMII_NORMCOLORS" | wmiir create /rbar/$STATUS_BAR
		while status | wmiir write /rbar/$STATUS_BAR; do
			sleep 1
		done
#         Action xlayout
#             if wmiir remove /rbar/$XLAYOUT_BAR 2>/dev/null; then
#                 sleep 2
#             fi
#             echo "$WMII_NORMCOLORS" | wmiir create /rbar/$XLAYOUT_BAR
# #             skb | wmiir write /rbar/$XLAYOUT_BAR
#             while skb a | wmiir write /rbar/$XLAYOUT_BAR; do
#                 sleep 1
#             done
	# Key Bindings
	Key $MODKEY-q
		Action quit &
	Key $MODKEY-Shift-q
		sudo shutdown -h now
	Key $MODKEY-Control-t
		case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
		0|1)
			echo -n "$Keys" | wmiir write /keys
			wmiir xwrite /ctl grabmod $MODKEY;;
		*)
			wmiir xwrite /keys $MODKEY-Control-t
			wmiir xwrite /ctl grabmod Mod3;;
		esac
	Key $MODKEY-space
		wmiir xwrite /tag/sel/ctl select toggle
	Key $MODKEY-d
		wmiir xwrite /tag/sel/ctl colmode sel default-max
	Key $MODKEY-s
		wmiir xwrite /tag/sel/ctl colmode sel stack-max
	Key $MODKEY-m
		wmiir xwrite /tag/sel/ctl colmode sel stack+max
	Key $MODKEY-a
		action $(wi_actions | wimenu -h "${hist}.actions" -n $histnum) &
	Key $MODKEY-p
		eval wmiir setsid "$(wimenu -h "${hist}.progs" -n $histnum <$progsfile)" &
	Key $MODKEY-t
		wmiir xwrite /ctl view $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
	Key $MODKEY-Return
		eval wmiir setsid $WMII_TERM &
	Key $MODKEY-Shift-Return
		eval "$WMII_TERM -e screen" &
	Key $MODKEY-Shift-space
		wmiir xwrite /tag/sel/ctl send sel toggle
	Key $MODKEY-f
		wmiir xwrite /client/sel/ctl Fullscreen toggle
	Key $MODKEY-Shift-c
		wmiir xwrite /client/sel/ctl kill
	Key $MODKEY-Shift-t
		wmiir xwrite "/client/sel/tags" $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
	Key $MODKEY-$LEFT
		wmiir xwrite /tag/sel/ctl select left
	Key $MODKEY-Control-$LEFT
		res=$(wmiir ls /tag | sed 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ d' | tail -1)
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | tail -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-$RIGHT
		wmiir xwrite /tag/sel/ctl select right
	Key $MODKEY-Control-$RIGHT
		res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ p' | sed -n '2p')
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | head -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-$DOWN
		wmiir xwrite /tag/sel/ctl select down
	Key $MODKEY-$UP
		wmiir xwrite /tag/sel/ctl select up
	Key $MODKEY-Control-$DOWN
		wmiir xwrite /tag/sel/ctl select down stack
	Key $MODKEY-Control-$UP
		wmiir xwrite /tag/sel/ctl select up stack
	Key $MODKEY-Shift-$LEFT
		wmiir xwrite /tag/sel/ctl send sel left
	Key $MODKEY-Shift-$RIGHT
		wmiir xwrite /tag/sel/ctl send sel right
	Key $MODKEY-Shift-$DOWN
		wmiir xwrite /tag/sel/ctl send sel down
	Key $MODKEY-Shift-$UP
		wmiir xwrite /tag/sel/ctl send sel up
	Key $MODKEY-z
		mpc prev >/dev/null
	Key $MODKEY-x
		mpc play >/dev/null
	Key $MODKEY-c
		mpc toggle >/dev/null
	Key $MODKEY-v
		mpc stop >/dev/null
	Key $MODKEY-b
		mpc next >/dev/null
	Key $MODKEY-Shift-z
		mpc seek -5% >/dev/null
	Key $MODKEY-Shift-b
		mpc seek +5% >/dev/null
	Key $MODKEY-Left
		res=$(wmiir ls /tag | sed 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ d' | tail -1)
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | tail -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-Right
		res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ p' | sed -n '2p')
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | head -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-Down
		wmiir xwrite /tag/sel/ctl select down
	Key $MODKEY-Up
		wmiir xwrite /tag/sel/ctl select up
!
	for i in 0 1 2 3 4 5 6 7 8 9; do
		cat <<'!' | sed 's/\$\<i\>/'$i'/g'
	Key $MODKEY-$i
		wmiir xwrite /ctl "view $i"
	Key $MODKEY-Shift-$i
		wmiir xwrite /client/sel/tags "$i"
!
	done
#         cat <<'!'
#         Key $MODKEY-Apostrophe
#                 wmiir xwrite /ctl "view 0"
# !

    # Registering actions and events for bars
    for i in $BARS; do
	full_barname=${i/:/_}
	bar=${i#*:}

	call_if_exists ${bar}_actions $full_barname
	call_if_exists ${bar}_events
    done
    unset full_barname bar
}

wi_events <<!
$(events | sed 's/^	\|^        //')
$(local_events)
!
unset events local_events

# WM Configuration
wmiir write /ctl <<!
	font $WMII_FONT
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	border 1
!
xsetroot -solid "$WMII_BACKGROUND" &

export WMII_FONT WMII_TERM
export WMII_FOCUSCOLORS WMII_SELCOLORS WMII_NORMCOLORS

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &

# Starting the bars.
for i in $BARS; do
    action ${i#*:} ${i/:/_}&
done

# which skb >/dev/null && action xlayout &
wi_proglist $PATH >$progsfile &

# Setup Tag Bar
IFS="$wi_nl"
wmiir rm $(wmiir ls /lbar | sed 's,^,/lbar/,') >/dev/null
seltag=$(wmiir read /tag/sel/ctl | sed 1q)
unset IFS
wi_tags | while read tag
do
	if [ "$tag" = "$seltag" ]; then
		echo "$WMII_FOCUSCOLORS" "$tag"
	else
		echo "$WMII_NORMCOLORS" "$tag"
	fi | wmiir create "/lbar/$tag"
done

## User init list:
# Set keyboard layouts for keys
setxkbmap -layout "us,ru,il" -option "grp:shift_toggle,grp_led:caps"
# Executing prev command resets xmodmap settings
xmodmap "$HOME/.Xmodmap"
# Hide mouse cursor
unclutter -idle 2 -jitter 3 &

wi_eventloop

## On exit
kill $(jobs -p)
sleep 3
[ -n "$(jobs -p)" ] && kill -9 $(jobs -p)
