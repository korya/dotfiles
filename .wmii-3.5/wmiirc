#!/bin/sh -f
# Configure wmii

# Configuration Variables
MODKEY=Mod1
MODKEY2=Mod4
UP=k
DOWN=j
LEFT=h
RIGHT=l

# colors tuples: "<text> <background> <border>"
WMII_NORMCOLORS='#888888 #222222 #333333'
WMII_FOCUSCOLORS='#ffffff #285577 #4c7899'

WMII_BACKGROUND='#333333'
# WMII_FONT='-*-dejavu serif-bold-*-*-*-*-*-*-*-*-*-iso10646-*'
# WMII_FONT='xft:monospace:pixelsize=15'
WMII_FONT='-*-fixed-medium-r-normal-*-*-130-*-*-*-*-iso10646-*'
# '-*-*-medium-r-normal-*-13-*-*-*-*-80-iso10646-*'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)
WMII_MENU="dmenu -i -b -fn '$WMII_FONT' -nf '$1' -nb '$2' -sf '$4' -sb '$5'"
WMII_9MENU="$HOME/.wmii-3.5/wmii9menu_rus.sh"

# WMII_TERM="urxvtcd +sb -bc -j -si -sk -sw -e screen"
WMII_TERM='urxvtcd'

# column rules
wmiir write /colrules << 'EOFFF'
/.*/ -> 108+42
EOFFF

# tagging rules
wmiir write /tagrules << 'EOFFF'
/Tabhunter.*/ -> ~+!
/Iceweasel.*/ -> web
/Skype.*/ -> skype
/urxvt.*/ -> !
/XMMS.*/ -> ~
/MPlayer.*/ -> ~
/OpenOffice.*/ -> ~
/rsibreak.*/ -> ~
/.*/ -> ! 
/.*/ -> 1
EOFFF

# Prefixes are added because the bars are ordered by lexical order of their
# names.
VOLUME_BAR="z1_volume"
BATTERY_BAR="z2_bat"
XLAYOUT_BAR="z7_layout"
STATUS_BAR="z9_status"

# status bar info
status() {
	echo -n $(date +%H:%M\ %d.%m.%y)
}

volume()
{
    local control=PCM

    [ -z "$1" ] && return 1

    case "$1" in
    up)
	amixer -c0 sset $control ${2-5}%+ >/dev/null
	;;
    down)
	amixer -c0 sset $control ${2-5}%- >/dev/null
	;;
    mute_toggle)
	control=Master # mute = Master is mutted 
	( amixer -c0 sget $control | grep -Ee '\[[0-9][0-9]*%\].*\[on\]' && \
	    amixer -c0 sset $control mute || \
	    amixer -c0 sset $control unmute ) >/dev/null
	;;
    status)
	progress='[--mute--]'
	# mute = Master is mutted
	amixer -c0 sget Master | grep -Ee '\[[0-9][0-9]*%\].*\[on\]' \
	    >/dev/null && progress=$(amixer -c0 sget $control | \
	    grep -oEe '\[[0-9][0-9]*%\]' | sed 1\ q | tr -cd '0-9\n' \
	    | $HOME/bin/progress_bar -q -w 10 -e - -f X -L)
	echo "vol: $progress"
    esac
}

BATTERY_NAME=BAT0
BATTERY_DETAILS="progress_bar lifetime"
BATTERY_PATH=/proc/acpi/battery/"$BATTERY_NAME"
# ADAPTER_NAME=AC0
battery()
{
    if [ ! -d "$BATTERY_PATH" ]; then
	return 1
    fi

    local fill_char=$(grep '^charging' "$BATTERY_PATH"/state | \
	grep -v dis >/dev/null 2>&1 && echo +- || echo X-)
    local total=$(grep '^design capacity:' "$BATTERY_PATH"/info | \
	tr -cd '0-9')
    local cur=$(grep '^remaining capacity:' "$BATTERY_PATH"/state | \
	tr -cd '0-9')
    local percent=$[ ($cur*100)/$total ]

    case "$1" in
    percent)
	echo -n ${percent}%
	;;
    lifetime)
	rate=$(grep '^present rate:' "$BATTERY_PATH"/state | tr -cd '0-9')
	h=$[ $cur/$rate ]
	m=$[ (($cur % $rate)*60)/$rate ]
	[ $m -lt 10 ] && m=0$m
	echo -n ${h}:${m}
	;;
    progress_bar)
# wiith +8 there will be at least one X until battery state is 5% or less.
	echo $[ $percent+8 ] | $HOME/bin/progress_bar -q -w 10 \
	    -f ${fill_char:0:1} -e ${fill_char:1:1} -L | tr -d '\n'
	;;
    by_details)
        for i in $BATTERY_DETAILS; do battery $i && echo -n ' '; done
        ;;
    set_details)
	local action=${2:0:1}
	local detail=${2:1}

	[ -z "$detail" ] && detail="$3"
	case "$action" in
	+)
	    [[ $BATTERY_DETAILS != *$detail* ]] && \
		BATTERY_DETAILS="$BATTERY_DETAILS $detail"
	    ;;
	-)
	    BATTERY_DETAILS="${BATTERY_DETAILS/ $detail/}"
	    ;;
        esac
	;;
    esac
}

# mpd bar
. $(echo $WMII_CONFPATH | tr ':' '\n' | grep "$HOME")/mpdbar.sh

# Event processing
#  Processed later by `wmiiloop' and evaled.
#  Duplicate the eval line and replace 'eval' with 'echo' for details.
eventstuff() {
	cat << 'EOFFF'
	# Events
	Event Start
		case "$1" in
		wmiirc)
			exit;
		esac
	Event Key
		fn=$(echo "$@" | sed 's/[^a-zA-Z_0-9]/_/g')
		Key_$fn "$@"
	Event CreateTag
		echo "$WMII_NORMCOLORS" "$@" | wmiir create "/lbar/$@"
	Event DestroyTag
		wmiir remove "/lbar/$@"
	Event FocusTag
		wmiir xwrite "/lbar/$@" "$WMII_FOCUSCOLORS" "$@"
	Event UnfocusTag
		wmiir xwrite "/lbar/$@" "$WMII_NORMCOLORS" "$@"
	Event UrgentTag
		shift
		wmiir xwrite "/lbar/$@" "*$@"
	Event NotUrgentTag
		shift
		wmiir xwrite "/lbar/$@" "$@"
	Event RightBarClick
        case "$2" in
        mpd)
		mpdbar_onClick "$1"
		;;
		$BATTERY_BAR)
			case "$1" in
			1) battery set_details +lifetime ;;
			3) battery set_details -lifetime ;;
			esac
			;;
		$VOLUME_BAR)
			case "$1" in
			1) volume down ;;
			2) volume mute_toggle ;;
			3) volume up ;;
			esac
        esac
	Event LeftBarClick
		shift
		wmiir xwrite /ctl view "$@"
	# Actions
	Action quit
		wmiir xwrite /ctl quit
	Action exec
		wmiir xwrite /ctl exec "$@"
	Action rehash
		proglist $PATH >$progsfile
	Action status
		set +xv
		if wmiir remove /rbar/$STATUS_BAR 2>/dev/null; then
			sleep 2
		fi
		echo "$WMII_NORMCOLORS" | wmiir create /rbar/$STATUS_BAR
		while status | wmiir write /rbar/$STATUS_BAR; do
			sleep 1m
		done
	Action xlayout
		if wmiir remove /rbar/$XLAYOUT_BAR 2>/dev/null; then
			sleep 2
		fi
		echo "$WMII_NORMCOLORS" | wmiir create /rbar/$XLAYOUT_BAR
		#	skb | wmiir write /rbar/$XLAYOUT_BAR
		while skb a | wmiir write /rbar/$XLAYOUT_BAR; do
			sleep 1
		done
	Action volume
		if wmiir remove /rbar/$VOLUME_BAR 2>/dev/null; then
			sleep 2
		fi
		echo "$WMII_NORMCOLORS" | wmiir create /rbar/$VOLUME_BAR
		while volume status | wmiir write /rbar/$VOLUME_BAR; do
			sleep 1
		done
	Action battery
		if wmiir remove /rbar/$BATTERY_BAR 2>/dev/null; then
			sleep 2
		fi
		echo "$WMII_NORMCOLORS" | wmiir create /rbar/$BATTERY_BAR
		while ( echo -n "bat: $(battery by_details)" ) | wmiir write /rbar/$BATTERY_BAR; do
			sleep 1m
		done
	Event ClientMouseDown
		client=$1; button=$2
		case "$button" in
		3)
			do=$(evapl $WMII_9MENU -initial "${menulast:-SomeRandomName}" Nop Delete Fullscreen)
			case "$do" in
			Delete)
				wmiir xwrite /client/$client/ctl kill;;
			Fullscreen)
				wmiir xwrite /client/$client/ctl Fullscreen on;;
			esac
			menulast=${do:-"$menulast"}
		esac
	# Key Bindings
	Key $MODKEY-Shift-q
	        sudo shutdown now -h
	Key $MODKEY-q
		wmiir xwrite /ctl quit
	Key $MODKEY-Control-t
		case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
		0|1)
			echo -n $Keys | tr ' ' '\012' | wmiir write /keys
			wmiir xwrite /ctl grabmod $MODKEY;;
		*)
			wmiir xwrite /keys $MODKEY-Control-t
			wmiir xwrite /ctl grabmod Mod3;;
		esac
	Key $MODKEY-Control-h
		res=$(wmiir ls /tag | sed 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ d' | tail -1)
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | tail -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-Control-l
		res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ p' | sed -n '2p')
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | head -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-bracketleft
		volume down
	Key $MODKEY-bracketright
		volume up
	Key $MODKEY-backslash
		volume mute_toggle
	Key $MODKEY-space
		wmiir xwrite /tag/sel/ctl select toggle
	Key $MODKEY-d
		wmiir xwrite /tag/sel/ctl colmode sel default
	Key $MODKEY-s
		wmiir xwrite /tag/sel/ctl colmode sel stack
	Key $MODKEY-m
		wmiir xwrite /tag/sel/ctl colmode sel max
	Key $MODKEY-a
		Action $(actionlist | eval $WMII_MENU) &
	Key $MODKEY-p
		sh -c "$(eval $WMII_MENU <$progsfile)" &
	Key $MODKEY-t
		wmiir xwrite /ctl "view $(tagsmenu)" &
	Key $MODKEY-Return
		eval $WMII_TERM &
	Key $MODKEY-Shift-Return
		eval "$WMII_TERM -e screen" &
	Key $MODKEY-Shift-space
		wmiir xwrite /tag/sel/ctl send sel toggle
	Key $MODKEY-f
		wmiir xwrite /client/sel/ctl Fullscreen toggle
	Key $MODKEY-Shift-c
		wmiir xwrite /client/sel/ctl kill
	Key $MODKEY-Shift-t
		wmiir xwrite "/client/$(wmiir read /client/sel/ctl)/tags" \
			"$(tagsmenu)" &
	Key $MODKEY-Shift-Control-t
		wmiir xwrite "/client/$(wmiir read /client/sel/ctl)/tags" \
			$( wmiir ls /tag | sed 's/\///; /sel/ d' | \
			tr '\n' '+' | sed 's/\+$//') &
	Key $MODKEY-$LEFT
		wmiir xwrite /tag/sel/ctl select left
	Key $MODKEY-$RIGHT
		wmiir xwrite /tag/sel/ctl select right
	Key $MODKEY-$DOWN
		wmiir xwrite /tag/sel/ctl select down
	Key $MODKEY-$UP
		wmiir xwrite /tag/sel/ctl select up
	Key $MODKEY-Shift-$LEFT
		wmiir xwrite /tag/sel/ctl send sel left
	Key $MODKEY-Shift-$RIGHT
		wmiir xwrite /tag/sel/ctl send sel right
	Key $MODKEY-Shift-$DOWN
		wmiir xwrite /tag/sel/ctl send sel down
	Key $MODKEY-Shift-$UP
		wmiir xwrite /tag/sel/ctl send sel up
	Key $MODKEY-z
		mpc prev >/dev/null
	Key $MODKEY-x
		mpc play >/dev/null
	Key $MODKEY-c
		mpc toggle >/dev/null
	Key $MODKEY-v
		mpc stop >/dev/null
	Key $MODKEY-b
		mpc next >/dev/null
	Key $MODKEY-Shift-z
		mpc seek -5% >/dev/null
	Key $MODKEY-Shift-b
		mpc seek +5% >/dev/null
	Key $MODKEY-Left
		res=$(wmiir ls /tag | sed 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ d' | tail -1)
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | tail -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-Right
		res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/ d; /^'$(wmiir read /tag/sel/ctl | head -1)'$/,$ p' | sed -n '2p')
		[ -z "$res" ] && res=$(wmiir ls /tag | sed -n 's|/||; /^sel$/!p' | head -1)
		wmiir xwrite /ctl "view $res" 2>/dev/null &
	Key $MODKEY-Down
		wmiir xwrite /tag/sel/ctl select down
	Key $MODKEY-Up
		wmiir xwrite /tag/sel/ctl select up
EOFFF
	for i in 0 1 2 3 4 5 6 7 8 9; do
		cat <<EOFFF
	Key $MODKEY-$i
		wmiir xwrite /ctl view "$i"
	Key $MODKEY-Shift-$i
		wmiir xwrite /client/sel/tags "$i"
EOFFF
	done
}

# WM Configuration
wmiir write /ctl << EOF
font $WMII_FONT
focuscolors $WMII_FOCUSCOLORS
normcolors $WMII_NORMCOLORS
grabmod $MODKEY
border 1
EOF

export WMII_MENU WMII_9MENU WMII_FONT WMII_TERM
export WMII_FOCUSCOLORS WMII_SELCOLORS WMII_NORMCOLORS

# Feed events to `wmiiloop' for processing
eval "$(eventstuff | sed 's/^[	]//' | { . wmiiloop; })"

echo "$Keys" | tr ' ' '\n' | wmiir write /keys

# Functions
Action() {
	action=$1; shift
	if [ -n "$action" ]; then
		Action_$action "$@" \
		|| conf_which $action "$@"
	fi
}

proglist() {
	paths=$(echo "$@" | sed 'y/:/ /')
	ls -lL $paths 2>/dev/null \
		| awk '$1 ~ /^[^d].*x/ && NF > 2 { print $NF }' \
		| sort | uniq
}

# Misc
progsfile="$WMII_NS_DIR/.proglist"
Action volume &
[ -d "$BATTERY_PATH" ] && Action battery &
# which skb >/dev/null && Action xlayout &
Action status &

proglist $PATH >$progsfile &

xsetroot -solid "$WMII_BACKGROUND" &

# Setup Tag Bar
seltag="$(wmiir read /tag/sel/ctl 2>/dev/null)"
wmiir ls /lbar |
while read bar; do
	wmiir remove "/lbar/$bar"
done
wmiir ls /tag | sed -e 's|/||; /^sel$/d' |
while read tag; do
	if [ "X$tag" = "X$seltag" ]; then
		echo "$WMII_FOCUSCOLORS" "$tag" | wmiir create "/lbar/$tag" 
	else
		echo "$WMII_NORMCOLORS" "$tag" | wmiir create "/lbar/$tag"
	fi
done

# More functions
tagsmenu() {
        wmiir ls /tag | sed 's|/||; /^sel$/d' | eval $WMII_MENU
}

actionlist() {
	{	proglist $WMII_CONFPATH
		echo -n $Actions | tr ' ' '\012'
	} | sort | uniq
}

conf_which() {
	which=$(which which)
	prog=$(PATH="$WMII_CONFPATH" $which $1); shift
	[ -n "$prog" ] && $prog "$@"
}

# Stop any running instances of wmiirc
echo Start wmiirc | wmiir write /event || exit 1

# Запускаем mpd bar
mpdbar_init
# Ставим обои
# qiv --root $HOME/share/Minimalistic_Black_and_White.jpg
# qiv --root $HOME/.gtkrc.d/wallpaper.jpg
# xsnow -solidbg -bg '#000000' -windtimer 5 -whirl 12 >/dev/null 2>&1 &
# Set keyboard layouts for keys
setxkbmap -layout "us,ru,il" -option "grp:shift_toggle,grp_led:caps"
# Executing prev command resets xmodmap settings
xmodmap "$HOME/.Xmodmap"

wmiir read /event |
while read event; do
	set -- $event
	event=$1; shift
	Event_$event $@
done 2>/dev/null

# Kill all forked processes. I hope this works.
# kill $(jobs -p)

